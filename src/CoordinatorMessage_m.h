//
// Generated file, do not edit! Created by nedtool 5.7 from CoordinatorMessage.msg.
//

#ifndef __COORDINATORMESSAGE_M_H
#define __COORDINATORMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>CoordinatorMessage.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet CoordinatorMessage
 * {
 *     \@customize(true);
 *     int startTime;
 *     bool isStart;
 *     string configFileName;
 * }
 * </pre>
 *
 * CoordinatorMessage_Base is only useful if it gets subclassed, and CoordinatorMessage is derived from it.
 * The minimum code to be written for CoordinatorMessage is the following:
 *
 * <pre>
 * class CoordinatorMessage : public CoordinatorMessage_Base
 * {
 *   private:
 *     void copy(const CoordinatorMessage& other) { ... }

 *   public:
 *     CoordinatorMessage(const char *name=nullptr, short kind=0) : CoordinatorMessage_Base(name,kind) {}
 *     CoordinatorMessage(const CoordinatorMessage& other) : CoordinatorMessage_Base(other) {copy(other);}
 *     CoordinatorMessage& operator=(const CoordinatorMessage& other) {if (this==&other) return *this; CoordinatorMessage_Base::operator=(other); copy(other); return *this;}
 *     virtual CoordinatorMessage *dup() const override {return new CoordinatorMessage(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from CoordinatorMessage_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(CoordinatorMessage)
 * </pre>
 */
class CoordinatorMessage_Base : public ::omnetpp::cPacket
{
  protected:
    int startTime;
    bool isStart;
    ::omnetpp::opp_string configFileName;

  private:
    void copy(const CoordinatorMessage_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CoordinatorMessage_Base&);
    // make constructors protected to avoid instantiation

    // make assignment operator protected to force the user override it
    CoordinatorMessage_Base& operator=(const CoordinatorMessage_Base& other);

  public:
    virtual ~CoordinatorMessage_Base();
    virtual CoordinatorMessage_Base *dup() const override {return new CoordinatorMessage_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    CoordinatorMessage_Base(const char *name=nullptr, short kind=0);
    CoordinatorMessage_Base(const CoordinatorMessage_Base& other);

    // field getter/setter methods
    virtual int getStartTime() const;
    virtual void setStartTime(int startTime);
    virtual bool getIsStart() const;
    virtual void setIsStart(bool isStart);
    virtual const char * getConfigFileName() const;
    virtual void setConfigFileName(const char * configFileName);
};


#endif // ifndef __COORDINATORMESSAGE_M_H

